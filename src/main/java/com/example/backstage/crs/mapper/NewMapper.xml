<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.backstage.crs.mapper.NewMapper">
    <select id="getStoreIdAll" resultType="map">
        select id::varchar,name from Org_Store where status=1;
    </select>
    <select id="login" resultType="map">
        select userid, storeid::varchar , tel, name, sex, refuserid, saleuserid,
        status,createdby, createdname, createdip
        ,(select roleid from User_Staff b where b.userid=a.userid) as roleid from user_base a where tel=#{tel}
    </select>
    <select id="getCoachAll" resultType="map">
        select a.userid,name from user_base a
        inner join User_Staff b on a.userid=b.userid
        where iscoach is true and b.status=1
    </select>
    <select id="getFunction" resultType="map">
        select functionid id,functionpid pid,shortname,functionnamecn as title,
       concat(array (select roleid from scr_role_function b where a.functionid=b.functionid)) as roles
        from scr_function a where deleteflag=0 and enableflag=0
    </select>
    <select id="getTeamschedule" resultType="map">
        select ct.scheduledate,ct.courseid::varchar,ct.coursename,
        ct.schedulebegin::varchar , ct.scheduleend::varchar ,ct.storeid ::varchar ,ct.storename,
        ct.reservablenumber,ct.signednumber,ct.reservedNumber,ct.coachname,ct.scheduleid::varchar ,ct.coachid::varchar,ctb.cid::varchar
        from cur_teamschedule ct
        left join cur_teamcourse_base ctb on ctb.courseid=ct.courseid
        where ct.scheduledate &gt;=#{day1}::date and ct.scheduledate &lt;=#{day2}::date
        and ct.isremoved=false
        and ctb.isremoved=false
        <if test="storeid!=null and storeid!=''" >
            and   ct.storeId=#{storeid} :: bigint
        </if>
        <if test="coachid!=null and coachid!=''" >
            and   ct.coachid=#{coachid} :: bigint
        </if>
        order by ct.schedulebegin asc
    </select>
    <select id="getCourseAll" resultType="map">
        select cid::varchar ,catetitle,reservablenumber,
         minpeople,courseduration from Cur_TeamCourseCategory_Base where isremoved=false
    </select>

    <select id="getCurTeamStrength" resultType="map">
        select sid::varchar ,sid::varchar mysid,strengthnumber from Cur_TeamCourseCategory_Strength
        where isremoved=false
        <if test="cid!=null and cid!=''" >
            and   cid=#{cid} :: bigint
        </if>
        <if test="strenth!=null and strenth!=''" >
            and   strengthgrade=#{strenth} :: bigint
        </if>
    </select>
    <insert id="setCurTeamCourseBase" parameterType="com.example.backstage.crs.util.Param">
        insert into Cur_TeamCourse_Base (courseid,cid, sid, coursename, courseduration, reservablenumber, minpeople,
        state,isremoved,createdon, createdby, createdname, createdip, lastedon, lastedby, lastedname, lastedip)
        values (
            #{courseid}::bigint,#{cid}::bigint,#{sid}::bigint,#{coursename},#{courseduration}::integer,#{reservablenumber}::integer,
            #{minpeople}::integer,1,false,now(),#{createdby},#{createdname},'ip',now(),#{createdby},#{createdname},'ip'
        )
    </insert>
    <insert id="setCurTeamSchedule" parameterType="com.example.backstage.crs.util.Param">
        insert into Cur_TeamSchedule(scheduledate, schedulebegin, scheduleend, storeid, storename,
        courseid, coursename, coachid, coachname, reservablenumber, reservednumber, signednumber,createdon,
        createdby, createdname, createdip,lastedon, lastedby, lastedname, lastedip, cid, sid,
        courseduration, minpeople)
        values (
            #{scheduledate}::date,#{schedulebegin}::time,#{scheduleend}::time+interval '1 hour',#{storeid}::bigint,
            #{storename},#{courseid}::bigint,
            #{coursename},#{coachid}::bigint,#{coachname},#{reservablenumber}::integer,0,0,
            now(),#{createdby},#{createdname},'ip',now(),#{createdby},#{createdname},'ip',
            #{cid}::bigint,#{sid}::bigint,#{courseduration}::integer,#{minpeople}::integer
                                  )
    </insert>
    <update id="upreservablenumber">
        update cur_teamschedule set ReservableNumber=#{reservablenumber}::integer where scheduleid=#{scheduleid}::bigint
    </update>
    <select id="getReservablenumber" resultType="map">
        select reservablenumber from cur_teamschedule where scheduleid=#{scheduleid}::bigint
    </select>
    <select id="getRoleid" resultType="map">
        select * from user_staff where userid=(select user_base.userid from user_base where tel=#{tel})
    </select>
    <select id="setPartsjson" resultType="map">
        select b.partsjson,ctb.purposes,a.coursename from cur_teamschedule a
        inner join Cur_TeamCourseCategory_Strength b on a.sid=b.sid
        inner join Cur_TeamCourseCategory_Base ctb on ctb.cid=b.cid
        where a.scheduleid=#{scheduleid}::bigint
    </select>
    <select id="getXiaoshou" resultType="map">
        select a.name,a.userid from user_base a
        inner join user_staff b on a.userid=b.userid
        where b.status=1 and strpos(b.roleid,'2018053014053010003')!=0
    </select>
    <update id="deletetk">
        update cur_teamschedule set isremoved=true where scheduleid=#{scheduleid}::bigint
    </update>
    <update id="quxiaoyuyue1">
        update crd_membershipcard_base set curtimes=curtimes+#{traineenum}::integer where cardno=#{cardno}
    </update>
    <update id="quxiaoyuyue2">
        update ord_ordercourse set OrdState=2 where ordid=#{ordid}::bigint
    </update>
    <update id="quxiaoyuyue3">
        update Cur_TeamSchedule set ReservedNumber=ReservedNumber-#{traineenum}::integer where scheduleid=#{scheduleid}::bigint
    </update>
    <update id="signed1">
        update ord_ordercourse set SignState=1 where ordid=#{ordid}::bigint
    </update>
    <update id="signed2">
        update cur_teamschedule set SignedNumber=SignedNumber+#{traineenum}::integer where scheduleid=#{scheduleid}::bigint
    </update>
    <select id="setUser" parameterType="String"  resultType="java.util.HashMap">
        select  userid as name,CONCAT(name,' ',tel) as value from user_base where name like '%'||#{name}||'%' or tel like '%'||#{name}||'%'
        and status=1
    </select>
    <select id="getAllcourse" resultType="map">
        select *,cid::varchar as mycid from Cur_TeamCourseCategory_Base
        where isremoved=false
        order by createdon desc
    </select>
    <select id="getStrenth" resultType="map">
        select sid::varchar , cid::varchar , strengthnumber, strengthgrade,  partsjson,(select count(1) from Cur_TeamCourseCategory_Strength
        where cid=#{cid}::bigint and strengthgrade=#{strengthgrade}::integer
        and strengthnumber!='' and isremoved=false
        ) as counts from Cur_TeamCourseCategory_Strength
        where cid=#{cid}::bigint and strengthgrade=#{strengthgrade}::integer
        and strengthnumber!='' and isremoved=false
        order by createdon desc
        limit #{limit}::bigint offset #{limit}::bigint*#{page}::bigint
    </select>
    <select id="getUnits" resultType="map">
        select * from base_dictionary where type='unit' and isremoved=false
    </select>
    <select id="getCategory" resultType="map">
        select * from cur_actionlibrary_category
    </select>
    <select id="getStrength" resultType="map">
        select * from cur_actionlibrary_strength
    </select>
    <select id="getAims" resultType="map">
        select * from base_dictionary where type='aims' and isremoved=false
    </select>
    <select id="getParts" resultType="map">
        select * from base_dictionary where type='zhm' and isremoved=false
    </select>
    <select id="getactionlibrary" resultType="map">
        select * from cur_actionlibrary where category=#{category} and strength=#{strength}
    </select>
    <insert id="setStrength" parameterType="com.example.backstage.crs.util.Param">
        insert into cur_teamcoursecategory_strength(sid, cid, strengthnumber, strengthgrade, imgsjson,
        trainingjson, isremoved, createdon, createdby, createdname, createdip,
        lastedon, lastedby, lastedname, lastedip, partsjson)
        values (
            #{sid}::bigint,#{cid}::bigint,#{strengthnumber},#{strengthgrade}::integer,'[]','[]',
            false,now(),'系统管理员','系统管理员','127.0.0.1',now(),'系统管理员','系统管理员','127.0.0.1',
            #{partsjson}
        )
    </insert>
    <update id="DeleteStrength">
        update cur_teamcoursecategory_strength set isremoved=true where sid=#{sid}::bigint
    </update>
    <update id="UpdateStrength" parameterType="com.example.backstage.crs.util.Param">
        update cur_teamcoursecategory_strength set partsjson=#{partsjson},strengthnumber=#{strengthnumber},
        strengthgrade=#{strengthgrade}::integer,lastedon=now() where sid=#{sid}::bigint
    </update>
    <select id="getNumberofreservations" resultType="map">
        select to_date(createdon::text,'yyyy-MM-dd'),sum(traineenum) from ord_ordercourse
        where createdon &gt; #{day1}::date and createdon &lt; #{day2}::date+interval '1 day'
        <if test="storeid!=null and storeid!=''" >
            and   storeId=#{storeid} :: bigint
        </if>
        group by to_date(createdon::text,'yyyy-MM-dd')
        order by to_date(createdon::text,'yyyy-MM-dd') asc
        ;
    </select>
    <select id="getPreCourse" resultType="map">
        select courseid::varchar as mycourseid, coursename
        from Cur_PrivCourse_Base where isremoved=false order by createdon desc
    </select>
    <insert id="setCurprivschedule" parameterType="com.example.backstage.crs.util.Param">
        insert into cur_privschedule(storeid, storename, courseid, coursename,
        scheduledate, schedulebegin, scheduleend, intervaltime, reservablenumber, reservednumber,
        signednumber, isremoved, createdon, createdby, createdname, createdip, lastedon, lastedby, lastedname, lastedip)
        values (
            #{storeid}::bigint,#{storename},#{courseid}::bigint,
            #{coursename},#{scheduledate}::date,#{schedulebegin}::time,#{scheduleend}::time,#{intervaltime}::integer,
            0,0,0,false,now(),'系统管理员','系统管理员','127.0.0.1',now(),'系统管理员','系统管理员','127.0.0.1'
        )
    </insert>
    <select id="getPivateuser" resultType="map">
        select ordid::varchar ,scheduleid::varchar,* from ord_ordercourse a
        inner join user_base b on a.userid=b.userid
        inner join crd_membershipcard_base c on a.cardno=c.cardno
        where (a.cardtype='P' or a.cardtype='S')  and scheduleid=#{scheduleid}::bigint
    </select>
    <update id="deletesj">
        update cur_privschedule set isremoved=true where scheduleid=#{scheduleid}::bigint
    </update>
    <update id="signedsj">
        update cur_privschedule set SignedNumber=SignedNumber+1 where scheduleid=#{scheduleid}::bigint
    </update>
    <update id="quxiaoyuyuesj">
        update cur_privschedule set ReservedNumber=ReservedNumber-#{traineenum}::integer where scheduleid=#{scheduleid}::bigint
    </update>
    <select id="getAllhyk" resultType="map">
        select cardid::varchar,cardname,cardtype from Crd_MembershipCardCategory_Base where isremoved=false and state=1
    </select>
    <select id="getUsers" resultType="map" parameterType="com.example.backstage.crs.entity.GetUsersEntity">
        select concat(array(select c.cardname from crd_membershipcard_user b
        left join crd_membershipcard_base c on b.cardno=c.cardno
        where a.userid=b.userid
        )) as cardsname,a.memgrade,a.name,a.tel,a.userid,a.createdon,a.status,f.name as storename,
        a.sex,a.storeid::varchar,a.sourcetype,saleuserid,a.points,
         (select name from user_base where userid=a.refuserid) as tjr,
         (select name from user_base where userid=a.saleuserid) as xs,a.remarks
         from user_base a
        left join crd_membershipcard_user d on a.userid=d.userid
        left join crd_membershipcard_base e on d.cardno=e.cardno
        left join org_store f on a.storeid=f.id
        where 1=1
        <if test="cardid!=null and cardid!=''" >
            and e.cardid=#{cardid}::bigint
        </if>
        <if test="storeid!=null and storeid!=''" >
            and a.storeId=#{storeid}::bigint
        </if>
        <if test="name!=null and name!=''" >
            and a.name like '%'||#{name}||'%'
        </if>
        <if test="tel!=null and tel!=''" >
            and a.tel like '%'||#{tel}||'%'
        </if>
        <if test="saleuserid!=null and saleuserid!=''" >
            and a.saleuserid=#{saleuserid}::bigint
        </if>
        <if test="status!=null and status!=''" >
            and a.status=#{status}::integer
        </if>
        group by a.userid,f.name
        order by a.createdon desc
        limit #{limit}::bigint offset case #{limit}::bigint
        when 999999 then 0 else #{page}::bigint*#{limit}::bigint end
    </select>
    <select id="TimedTasktk" resultType="map">
        select ordid::varchar,traineenum,scheduleid::varchar from ord_ordercourse
        where isremoved=false and ordstate=1
        and signstate=0 and coursedate>='2021-01-01' and cardtype='T'
        and to_date(coursedate::text,'yyyy-MM-dd')=#{date}::date
        and (courseendtime+interval '1 hour') &lt;#{time}::time
    </select>
    <select id="TimedTasksj" resultType="map">
        select ordid::varchar,traineenum,scheduleid::varchar from ord_ordercourse
        where isremoved=false and ordstate=1
        and signstate=0 and coursedate>='2021-01-01' and (cardtype='P' or cardtype='S')
        and to_date(coursedate::text,'yyyy-MM-dd')=#{date}::date
        and (courseendtime+interval '1 hour') &lt;#{time}::time
    </select>
    <insert id="setlog">
        insert into scr_log(logid,logcode,message, logtype,projectname,methodname,
        filename,classname, createdon,createdname)
        values (
            #{logid}::bigint,'OK',#{message},1,'FaceBody.NET','configureTasks','TimedTaskController','TimedTaskController',now(),'系统管理员'
        )
    </insert>
    <update id="updateUser" parameterType="com.example.backstage.crs.util.Param">
        update user_base set name=#{name},tel=#{tel},sex=#{sex},storeid=#{storeid}::bigint,
        saleuserid=#{saleuserid}::bigint,remarks=#{remarks} where userid=#{userid}::bigint
    </update>
    <update id="DisableUser" parameterType="com.example.backstage.crs.util.Param">
        update user_base set status=#{status}::integer where userid=#{userid}::bigint
    </update>
    <update id="updatePoints" parameterType="com.example.backstage.crs.util.Param">
        update user_base set points=points+#{points}::numeric where userid=#{userid}::bigint
    </update>
    <insert id="setLogUserPoints" parameterType="com.example.backstage.crs.util.Param">
        insert into Log_User_Points (logid, userid, currentpoints, points,
         surpluspoints, remarks,
        createdon, createdby, createdname, createdip, actionstate, changeaction)
        values (
            #{logid}::bigint,#{userid}::bigint,#{currentpoints}::numeric,#{points}::numeric,
            #{surpluspoints}::numeric,
            #{remarks},now(),'系统管理员','系统管理员','127.0.0.1',
            #{actionstate},#{remarks}
        )
    </insert>
    <update id="updateMemgrade" parameterType="com.example.backstage.crs.util.Param">
        update user_base set memgrade=#{memgrade} where userid=#{userid}::bigint
    </update>
    <select id="getImage" resultType="map">
        select c.originalpath as img  from user_base a
        left join User_Images b on a.userid=b.userid
        left join base_resources c on b.resid=c.resid
        where a.userid=#{userid}::bigint
        limit 1
    </select>
    <select id="getAmount" resultType="map">
        select sum(b.TotalFee) from crd_membershipcard_user a
        inner join crd_membershipcard_base b on a.cardno=b.cardno
        where a.userid=#{userid}::bigint
    </select>
    <select id="getCourseAmount" resultType="map">
        select count(1) from ord_ordercourse
        where signstate=1
        and userid=#{userid}::bigint
    </select>
    <select id="getCardByUserid" resultType="map">
        select a.cardno,b.cardname,b.createdon,b.state,sum(c.sellingfee) as sellingfee,
        b.cardbegin,b.cardend,a.remarks,b.curtimes,b.lastedby,b.cardtype,b.cardid::varchar,TypeId::varchar,
        b.OriginalFee,b.totalfee,b.timefee,b.isopen,b.periodvalidity,b.disablebegin,b.disableend,
        c.payment,c.storeid::varchar ,c.storename,c.salerid,c.salername,b.times,b.isfree
        from crd_membershipcard_user a
        inner join crd_membershipcard_base b on a.cardno=b.cardno
        inner join crd_membershipcard_purchase c on b.cardno=c.cardno
        where a.userid=#{userid}::bigint
        and curtimes &gt; 0 and case when b.cardend is not null then b.cardend &gt;now() else 1=1 end
        group by a.cardno, b.cardname, b.createdon, b.state, b.cardbegin, b.cardend, a.remarks,b.curtimes,b.lastedby,
        b.cardtype,b.cardid,TypeId,b.OriginalFee,b.totalfee,b.timefee,b.isopen,b.periodvalidity,b.disablebegin,b.disableend,
        c.payment,c.storeid,c.storename,c.salerid,c.salername,b.times,b.isfree
    </select>
    <select id="getCardByUseridsx" resultType="map">
        select a.cardno,b.cardname,b.createdon,b.state,sum(c.sellingfee) as sellingfee,
        b.cardbegin,b.cardend,a.remarks,b.curtimes,b.lastedby,b.cardtype,b.cardid::varchar,TypeId::varchar,
        b.OriginalFee,b.totalfee,b.timefee,b.isopen,b.periodvalidity,b.disablebegin,b.disableend,
        c.payment,c.storeid::varchar ,c.storename,c.salerid,c.salername,b.times,b.isfree
        from crd_membershipcard_user a
        inner join crd_membershipcard_base b on a.cardno=b.cardno
        inner join crd_membershipcard_purchase c on b.cardno=c.cardno
        where a.userid=#{userid}::bigint
        and (curtimes &lt;=0 or case when b.cardend is not null then b.cardend &lt;now() else false end)
        group by a.cardno, b.cardname, b.createdon, b.state, b.cardbegin, b.cardend, a.remarks,b.curtimes,b.lastedby,
        b.cardtype,b.cardid,TypeId,b.OriginalFee,b.totalfee,b.timefee,b.isopen,b.periodvalidity,b.disablebegin,b.disableend,
        c.payment,c.storeid,c.storename,c.salerid,c.salername,b.times,b.isfree
    </select>
    <select id="setCrdMembershipcardPurchase" parameterType="com.example.backstage.crs.util.Param">
        insert into crd_membershipcard_purchase (cardid, cardname, cardno, buytype,
        buytimes, points, sellingfee, payment, storeid, storename, salerid, salername,
        cardbegin, cardend, remarks, isremoved, createdon, createdby, createdname, createdip,
        lastedon, lastedby, lastedname, lastedip)
        values (
            #{cardid}::bigint,#{cardname},#{cardno},#{buytype},#{buytimes}::integer,
            0,#{sellingfee}::numeric,#{payments}::integer,#{storeid}::bigint,#{storename},#{saleid}::bigint,#{salename},
            #{day1}::date,#{day2}::date,
            #{remarks},false ,now(),'系统管理员','系统管理员','127.0.0.1',now(),'系统管理员','系统管理员','127.0.0.1'
        )
    </select>
    <update id="xuka" parameterType="com.example.backstage.crs.util.Param">
        update crd_membershipcard_base set CurTimes=CurTimes+#{buytimes}::integer ,
        TotalTimes=TotalTimes+#{buytimes}::integer ,
        TotalFee=TotalFee+#{sellingfee}::numeric
        where cardno=#{cardno}
    </update>
    <select id="setCrdMembershipcardStop" parameterType="com.example.backstage.crs.util.Param">
        insert into crd_membershipcard_stop(userid, cardno, cardid, cardname, typeid, curtimes,
        stoptype, begindate, beginend, fee, payments, remarks, createdon, createdby, createdname, createdip)
        values (
            #{userid}::bigint,#{cardno},#{cardid}::bigint,#{cardname},#{typeid}::bigint,#{curtimes}::integer ,
            #{stoptype},#{day1}::date,#{day2}::date,#{fee}::numeric,#{payments}::integer,#{remarks},
            now(),'系统管理员','系统管理员','127.0.0.1'
        )
    </select>
    <update id="tingka" parameterType="com.example.backstage.crs.util.Param">
        update crd_membershipcard_base set State=0,
        DisableBegin=#{day1}::date,
        DisableEnd=#{day2}::date
        where cardno=#{cardno}
    </update>
    <update id="huifu">
        update crd_membershipcard_base set state=1,disablebegin=null,disableend=null
        where cardno=#{cardno}
    </update>
    <insert id="setCrdMembershipCardReduce" parameterType="com.example.backstage.crs.util.Param">
        insert into Crd_MembershipCard_Reduce(userid, cardno, usersjson, cardid, cardname,
        typeid, originalfee, times, remarks, createdon, createdby, createdname, createdip)
        values (
            #{userid}::bigint,#{cardno},#{usersjson}::json,#{cardid}::bigint,#{cardname},
            #{typeid}::bigint,#{originalfee}::numeric,#{times}::integer ,#{remarks},
            now(),'系统管理员','系统管理员','127.0.0.1'
        )
    </insert>
    <update id="kouci" parameterType="com.example.backstage.crs.util.Param">
        update crd_membershipcard_base set CurTimes=CurTimes-#{times}::integer
        where cardno=#{cardno}
    </update>
    <insert id="setCrdMembershipCardChangePeriod" parameterType="com.example.backstage.crs.util.Param">
        insert into Crd_MembershipCard_ChangePeriod(userid, cardno, cardid, cardname, typeid,
        oldbegin, oldend, newbegin, newend, remarks, createdon, createdby, createdname, createdip)
        values (
            #{userid}::bigint,#{cardno},#{cardid}::bigint,#{cardname},#{typeid}::bigint,
            #{day1}::date,#{day2}::date,#{schedulebegin}::date,#{scheduleend}::date,
            #{remarks},now(),'系统管理员','系统管理员','127.0.0.1'
        )
    </insert>
    <update id="qixianbiangeng" parameterType="com.example.backstage.crs.util.Param">
        update crd_membershipcard_base set cardend=#{scheduleend}::date,cardbegin=#{schedulebegin}::date,
        isopen=true,
        curtimes= case when #{cardtype}='P' then #{scheduleend}::date-#{schedulebegin}::date else curtimes end
        where cardno=#{cardno}
    </update>
    <insert id="setCrdMembershipCardReconciliation" parameterType="com.example.backstage.crs.util.Param">
        insert into Crd_MembershipCard_Reconciliation(userid, cardno, cardid, cardname, typeid, rectype,
        recamount, remarks, createdon, createdby, createdname, createdip)
        values (
            #{userid}::bigint,#{cardno},#{cardid}::bigint,#{cardname},#{typeid}::bigint,
            #{rectype},#{recamount}::numeric,#{remarks},
            now(),'系统管理员','系统管理员','127.0.0.1'
        )
    </insert>
    <update id="pingzhang1" parameterType="com.example.backstage.crs.util.Param">
        update crd_membershipcard_base set TotalFee=TotalFee+#{recamount}::numeric
        where cardno=#{cardno}
    </update>
    <update id="pingzhang2" parameterType="com.example.backstage.crs.util.Param">
        update crd_membershipcard_purchase set sellingfee=sellingfee+#{recamount}::numeric
        where cardno=#{cardno}
    </update>
<!--    部分转卡-->
    <update id="bufenzhuanka" parameterType="com.example.backstage.crs.util.Param">
        update crd_membershipcard_base set totalfee=totalfee-#{fee}::numeric,
        totaltimes=totaltimes-#{curtimes}::integer ,remarks=#{remarks},curtimes=curtimes-#{curtimes}::integer
        where cardno=#{cardno}
    </update>
<!--    全部转卡-->
    <update id="quanbuzhuanka" parameterType="com.example.backstage.crs.util.Param">
        update crd_membershipcard_base set totalfee=totalfee-#{fee}::numeric,
        totaltimes=totaltimes-#{curtimes}::integer,remarks=#{remarks},state=0,lastedby='转卡',
        curtimes=curtimes-#{curtimes}::integer
        where cardno=#{cardno}
    </update>
    <update id="zhuankakouci" parameterType="com.example.backstage.crs.util.Param">
        update crd_membershipcard_purchase set sellingfee=sellingfee-#{fee}::numeric,buytimes=buytimes-#{curtimes}::integer
        where cardno=#{cardno}
    </update>
    <insert id="bangka1"  parameterType="com.example.backstage.crs.util.Param">
        insert into crd_membershipcard_user (userid, cardno, ispoint, remarks, state, isremoved,
        createdon, createdby, createdname, createdip, lastedon, lastedby, lastedname, lastedip)
        values (
            #{userid}::bigint,#{cardno},true ,#{remarks},1,false ,
            now(),'系统管理员','系统管理员','127.0.0.1',now(),'系统管理员','系统管理员','127.0.0.1'
        )
    </insert>
    <insert id="bangka2"  parameterType="com.example.backstage.crs.util.Param">
        insert into crd_membershipcard_purchase(cardid, cardname, cardno, buytype, buytimes,
        points, sellingfee, payment, storeid, storename, salerid, salername, cardbegin, cardend, remarks,
        isremoved, createdon, createdby, createdname, createdip, lastedon, lastedby, lastedname, lastedip)
        values (
            #{cardid}::bigint,#{cardname},#{cardno},'F', #{totaltimes}::integer,
            0,#{totalfee}::numeric,#{payments}::integer,#{storeid}::bigint,#{storename},#{saleid}::bigint,
            #{salename},#{day1}::date,#{day2}::date,#{remarks},false ,
            now(),'系统管理员','系统管理员','127.0.0.1',now(),'系统管理员','系统管理员','127.0.0.1'
        )
    </insert>
    <insert id="bangka3"  parameterType="com.example.backstage.crs.util.Param">
        insert into crd_membershipcard_base(cardno, cardid, cardname, cardtype, isfree, typeid, originalfee,
        isopen, cardbegin, periodvalidity, cardend, times, points, curtimes, totaltimes, totalfee,remarks,
        state,createdon, createdby,
        createdname, createdip, lastedon, lastedby, lastedname, lastedip, timefee)
        values (
            #{cardno},#{cardid}::bigint,#{cardname},#{cardtype},false ,#{typeid}::bigint,#{originalfee}::numeric,
            #{isopen}::boolean,#{day1}::date,#{periodvalidity}::integer ,#{day2}::date,#{times}::integer ,0,#{totaltimes}::integer ,
            #{totaltimes}::integer ,#{totalfee}::numeric,#{remarks},1,
            now(),'系统管理员','系统管理员','127.0.0.1',now(),'系统管理员','系统管理员','127.0.0.1',
            #{timefee}::numeric
        )
    </insert>
    <insert id="setCrdMembershipCardTransfer"  parameterType="com.example.backstage.crs.entity.SetCrdMembershipCardTransferEntity">
        insert into Crd_MembershipCard_Transfer(userid, username, userphone, cardno, cardid, cardname,
        typeid, curtimes, newuserid, newusername, newuserphone, fee, payments, remarks,
        createdon, createdby, createdname, createdip)
        values (
            #{userid}::bigint,#{username},#{userphone},#{cardno},#{cardid}::bigint,#{cardname},
            #{typeid}::bigint,#{curtimes}::integer,#{newuserid}::bigint,#{newusername},#{newuserphone},
            0,4,null, now(),'系统管理员','系统管理员','127.0.0.1'
        )
    </insert>
    <select id="getUserSalesFollowup" resultType="map">
        select * from User_Sales_Followup where userid=#{userid}::bigint
    </select>
    <select id="getOrdOrdercourse" resultType="map">
        select *,
         (select count(1) from ord_ordercourse where userid=#{userid}::bigint and isremoved=false)
         from ord_ordercourse
        where userid=#{userid}::bigint and isremoved=false
        order by createdon desc
        limit #{limit}::integer offset #{limit}::integer*#{page}::integer
    </select>
    <select id="getCaozuojilu" resultType="map">
        (select b.createdon operatingtime,c.cardname vipcard,case b.buytype when 'F' then '首充' else '续卡' end operatingtype,
        b.buytimes operatingchange,b.sellingfee operatingfee,
        (to_date(c.cardbegin::text,'yyyy-MM-dd')::varchar ||' ~ '||to_date(c.cardend::text,'yyyy-MM-dd')::varchar ) operatingtheterm,
        c.createdname operatingpeople,c.remarks operatingremarks
        from crd_membershipcard_user a
        inner join crd_membershipcard_purchase b on a.cardno=b.cardno
        inner join crd_membershipcard_base c on b.cardno=c.cardno
        where a.userid=#{userid}::bigint
        order by b.createdon desc )
        UNION ALL
        (
        select a.createdon,a.cardname,case a.stoptype when 'T' then '临时停卡' else '永久停卡' end,
        a.curtimes,a.fee,(to_date(a.begindate::text,'yyyy-MM-dd')::varchar ||' ~ '||to_date(a.beginend::text,'yyyy-MM-dd')::varchar ),
        a.createdname,a.remarks
        from Crd_MembershipCard_Stop a
        inner join crd_membershipcard_user b on a.cardno=b.cardno
        where b.userid=#{userid}::bigint
        )
        UNION ALL
        (
        select a.createdon,a.cardname,'扣次',
        a.times,null,null,a.createdname,a.remarks
        from Crd_MembershipCard_Reduce a
        inner join crd_membershipcard_user b on a.cardno=b.cardno
        where b.userid=#{userid}::bigint
        )
        UNION ALL
        (
        select a.createdon,a.cardname,'期限变更',
        null,null,(to_date(a.newbegin::text,'yyyy-MM-dd')::varchar ||' ~ '||to_date(a.newend::text,'yyyy-MM-dd')::varchar ),
        a.createdname,a.remarks
        from Crd_MembershipCard_ChangePeriod a
        inner join crd_membershipcard_user b on a.cardno=b.cardno
        where b.userid=#{userid}::bigint
        )
        UNION ALL
        (
        select a.createdon,a.cardname,'平账',
        null,a.recamount,null,a.createdname,a.remarks
        from Crd_MembershipCard_Reconciliation a
        inner join crd_membershipcard_user b on a.cardno=b.cardno
        where b.userid=#{userid}::bigint
        )
        UNION ALL
        (
        select a.createdon,a.cardname,'转卡',
        a.curtimes,null,null,a.createdname,a.remarks
        from Crd_MembershipCard_Transfer a
        inner join crd_membershipcard_user b on a.cardno=b.cardno
        where b.userid=#{userid}::bigint
        )
        order by operatingtime desc
        #{limit}::integer offset #{limit}::integer*#{page}::integer
    </select>
    <select id="setUserSalesFollowup">
        insert into User_Sales_Followup(userid, remarks, createdon,
        createdby, createdname, createdip, lastedon, lastedby, lastedname, lastedip)
        values (
            #{userid}::bigint,#{remarks},
            now(),'系统管理员','系统管理员','127.0.0.1',now(),'系统管理员','系统管理员','127.0.0.1'
        )
    </select>
    <select id="getCrdMembershipCardCategoryTypeCard" resultType="map">
        select tid::varchar,cardid::varchar,cardtype
        ,times,fee,periodvalidity,points
        from Crd_MembershipCardCategory_TypeCard where cardid=#{cardid}::bigint
        and isremoved=false
    </select>
    <select id="getAllCards" resultType="map" parameterType="com.example.backstage.crs.util.Param">
        select cardid::varchar, cardname, cardtype, logoid::varchar, resurl, istransfer, ismulmem,
        isonlinebuy, isopenedbyfirst, coursetype, isfree, labels, seqno, storesjson::varchar ,state,
        (select count(1) from Crd_MembershipCardCategory_Base
        where isremoved=false
        <if test="status!=null and status!=''" >
            and State=#{status}::integer
        </if>
        <if test="cardname!=null and cardname!=''" >
            and cardname like '%'||#{cardname}||'%'
        </if>
        <if test="cardtype!=null and cardtype!=''" >
            and cardtype=#{cardtype}
        </if>
        <if test="isonlinebuy!=null and isonlinebuy!=''" >
            and isonlinebuy=#{isonlinebuy}::boolean
        </if>
        ) counts
         from Crd_MembershipCardCategory_Base
        where isremoved=false
        <if test="status!=null and status!=''" >
            and State=#{status}::integer
        </if>
        <if test="cardname!=null and cardname!=''" >
            and cardname like '%'||#{cardname}||'%'
        </if>
        <if test="cardtype!=null and cardtype!=''" >
            and cardtype=#{cardtype}
        </if>
        <if test="isonlinebuy!=null and isonlinebuy!=''" >
            and isonlinebuy=#{isonlinebuy}::boolean
        </if>
        limit #{limit}::integer offset #{limit}::integer*#{page}::integer
    </select>
    <select id="getCrdMembershipCardCategoryTeamCourse" resultType="map">
        select tcid::varchar , cardid::varchar , courseid::varchar , coursename, constimes,
        preferconstimes, state from Crd_MembershipCardCategory_TeamCourse
        where cardid=#{cardid}::bigint;
    </select>
</mapper>
