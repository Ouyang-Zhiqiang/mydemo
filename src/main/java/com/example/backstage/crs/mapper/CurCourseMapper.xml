<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.backstage.crs.mapper.CurCourseMapper">
    <select id="getTotalAttendance" resultType="double">
        select COALESCE(round(t1.attendence::numeric/t2.amount::numeric,4)*100, 0) as TotalAttendance from
          (
            select sum(SignedNumber/ReservableNumber) as attendence from Cur_TeamSchedule
            where isremoved=false
            and SignedNumber>=1 and ScheduleDate &gt;= #{begintime}::timestamp and ScheduleDate &lt;= #{endtime}::timestamp
            <if test="storeid !=null and storeid!=''">
                and storeid=#{storeid}::bigint
            </if>
          ) as t1,
          (
            select count(*) as amount  from Cur_TeamSchedule
            where isremoved=false
            and SignedNumber &gt;=1 and ScheduleDate &gt;= #{begintime}::timestamp and ScheduleDate &lt;= #{endtime}::timestamp
            <if test="storeid !=null and storeid!=''">
                and storeid=#{storeid}::bigint
            </if>
          ) as t2;
    </select>
    <select id="getGroupClassAttendance" resultType="double">
        select COALESCE(round(t1.attendence::numeric/t2.amount::numeric,4)*100, 0) as TotalAttendance from
        (
        select sum(SignedNumber/ReservableNumber) as attendence from Cur_TeamSchedule
        where isremoved=false and SignedNumber &gt;=1
        and ScheduleDate &gt;=#{begintime}::timestamp and ScheduleDate &lt;=#{endtime}::timestamp
        <if test="storeid !=null and storeid!=''">
            and storeid=#{storeid}::bigint
        </if>
        <if test="cid !=null and cid!=''">
            and cid=#{cid}::bigint
        </if>
        ) as t1,
        (
        select count(*) as amount  from Cur_TeamSchedule
        where isremoved=false and SignedNumber &gt;=1
        and ScheduleDate &gt;=#{begintime}::timestamp and ScheduleDate &lt;=#{endtime}::timestamp
        <if test="storeid !=null and storeid!=''">
            and storeid=#{storeid}::bigint
        </if>
        <if test="cid !=null and cid!=''">
            and cid=#{cid}::bigint
        </if>
        ) as t2;
    </select>
    
    <select id="getMonthlyAttendance" resultType="double">
        select COALESCE(round(t1.attendence::numeric/t2.amount::numeric,4)*100, 0) as monthlyAttendance from
        (
        select sum(SignedNumber/ReservableNumber) as attendence from Cur_TeamSchedule
        where isremoved=false and SignedNumber>=1
        and scheduledate &gt;=#{begintime}::timestamp and scheduledate &lt;=#{endtime}::timestamp
        <if test="storeid !=null and storeid!=''">
            and storeid=#{storeid}::bigint
        </if>
        and schedulebegin between #{coursetime}::time and #{courseendtime}::time
        ) as t1,
        (
        select count(*) as amount  from Cur_TeamSchedule
        where isremoved=false and SignedNumber>=1
        and scheduledate &gt;=#{begintime}::timestamp and scheduledate &lt;=#{endtime}::timestamp
        <if test="storeid !=null and storeid!=''">
            and storeid=#{storeid}::bigint
        </if>
        and schedulebegin between #{coursetime}::time and #{courseendtime}::time
        ) as t2;
    </select>
    <select id="getConversionRateOfGroupLessons" resultType="double">
        select round(t1.num::numeric/t2.num::numeric,4)*100 as ConversionRateOfGroupLessons from
        (select count(*) as num from (
        select ub.userid from user_base ub
        left join (select userid,cardno from Crd_MembershipCard_User) cmu
        on ub.userid = cmu.userid
        left join (select createdon,cardno,cardid,isfree from Crd_MembershipCard_Base) cmb
        on cmu.cardno = cmb.cardno
        left join (select coursetype,cardid,cardnumber from Crd_MembershipCardCategory_Base) cmcb
        on cmb.cardid = cmcb.cardid
        where cmcb.coursetype = #{coursetype}
        and cmb.isfree = false
        and cmcb.cardnumber='12'
        and cmb.CreatedOn &gt;=#{begintime}::timestamp
        and cmb.CreatedOn &lt;=#{endtime}::timestamp
        <if test="storeid !=null and storeid!=''">
            and ub.storeid=#{storeid}::bigint
        </if>
        and ub.userid in (
        select ub2.userid from user_base ub2
        left join (select userid,cardno from Crd_MembershipCard_User) cmu2
        on ub2.userid = cmu2.userid
        left join (select createdon,cardno,cardid,isfree from Crd_MembershipCard_Base) cmb2
        on cmu2.cardno = cmb2.cardno
        left join (select coursetype,cardid,cardnumber from Crd_MembershipCardCategory_Base) cmcb2
        on cmb2.cardid = cmcb2.cardid
        where cmcb2.coursetype = #{coursetype}
        and cmb2.isfree = true
        and cmcb2.cardnumber='12'
        and cmb.CreatedOn &gt;=#{begintime}::timestamp
        and cmb.CreatedOn &lt;=#{endtime}::timestamp
        <if test="storeid !=null and storeid!=''">
            and ub.storeid=#{storeid}::bigint
        </if>
        group by ub2.userid
        )
        group by ub.userid
        ) as t) as t1,
        (
        select count(*) as num from (
        select ub.userid from user_base ub
        left join (select userid,cardno from Crd_MembershipCard_User) cmu
        on ub.userid = cmu.userid
        left join (select createdon,cardno,cardid,isfree from Crd_MembershipCard_Base) cmb
        on cmu.cardno = cmb.cardno
        left join (select coursetype,cardid,cardnumber from Crd_MembershipCardCategory_Base) cmcb
        on cmb.cardid = cmcb.cardid
        where cmcb.coursetype = #{coursetype}
        and cmb.isfree = true
        and cmcb.cardnumber='12'
        and cmb.CreatedOn &gt;=#{begintime}::timestamp
        and cmb.CreatedOn &lt;=#{endtime}::timestamp
        <if test="storeid !=null and storeid!=''">
            and ub.storeid=#{storeid}::bigint
        </if>
        group by ub.userid
        ) as t
        ) as t2;
    </select>
    <select id="getNumberOfLessonsGroupLessons" resultType="Integer">
        select count(*) as Tnumber from Cur_TeamSchedule
        where IsRemoved=false and SignedNumber>0
        and scheduledate &gt;=#{begintime}::timestamp and scheduledate &lt;=#{endtime}::timestamp
        <if test="storeid !=null and storeid!=''">
            and storeid=#{storeid}::bigint
        </if>
    </select>

    <select id="getNumberOfPrivateLessons" resultType="Integer">
        select count(*) as Tnumber from Cur_PrivSchedule
        where IsRemoved=false and SignedNumber>0
        and scheduledate &gt;=#{begintime}::timestamp and scheduledate &lt;=#{endtime}::timestamp
        <if test="storeid !=null and storeid!=''">
            and storeid=#{storeid}::bigint
        </if>
    </select>

    <insert id="RegUserSendvcode">
        insert into res_phonemessage(sendid,senddate,mobile,sendtype,sendcode,effecminutes,enddate,senddetails,content,createdon,createdby,createdname,createdip)
         values(#{id},now(),#{num},1,#{code},30,now() + '30 min','【颜身运动】您在颜身运动请求的注册绑定验证码是：'+#{code}+'会员在小程序注册绑定',now(),#{num},#{num},'::1')
    </insert>

    <select id="getcourseinformation" resultType="map">
        select ub.name,ub.tel,oo.traineenum,cmb.cardname,oo.SignState,e.cardtype,
       oo.OrdState,oo.Remarks,oo.createdon,ct.reservablenumber,oo.ordid,oo.userid,oo.cardno
from Cur_TeamSchedule ct
         inner join Ord_OrderCourse oo on ct.scheduleid=oo.scheduleid
         inner join user_base ub on oo.userid=ub.userid
         inner join Crd_MembershipCard_Base cmb on oo.cardno=cmb.cardno
inner join crd_membershipcardcategory_base e on cmb.cardid=e.cardid
        where oo.cardtype='T' and  ct.ScheduleId=#{ScheduleId}::bigint
    </select>

    <select id="privatelessonschedule" resultType="map">
        select to_char(a.ScheduleDate,'yyyy-mm-dd') ScheduleDate,to_char(a.ScheduleBegin,'hh24:mi') ScheduleBegin,to_char(a.ScheduleEnd,'hh24:mi') ScheduleEnd,
        a.CourseId::VARCHAR ,a.CourseName,a.ReservableNumber,a.ReservedNumber,a.SignedNumber,b.coachid::VARCHAR,b.CoachName,a.ScheduleId::VARCHAR,a.StoreId::VARCHAR ,a.StoreName
        from Cur_PrivSchedule a left join Cur_PrivCourse_Base b on a.courseid=b.courseid
        where ScheduleDate &gt;=#{begintime}::timestamp
        and ScheduleDate  &lt;#{endtime}::timestamp+ interval '1 day' and a.isremoved=false
        <if test="storeid !=null and storeid!=''">
            and storeid=#{storeid}::bigint
        </if>
        <if test="coachid !=null and coachid!=''">
            and coachid=#{coachid}::bigint
        </if>
        order by ScheduleDate,ScheduleBegin
    </select>

    <select id="sijiaoyuyuerenshu" resultType="Integer">
        select count(*) from ord_ordercourse oo
        inner join Cur_PrivSchedule cp
        on oo.scheduleid=cp.scheduleid
        where oo.ordstate=1 and oo.isremoved=false
        and cp.scheduleid=#{scheduleid}::bigint
    </select>



    <update id="xiugaijifen">
        update user_base set Points=Points+#{points}::numeric
        where userid=#{userid}::bigint
    </update>

    <insert id="goukasongjifen">
        INSERT INTO log_user_points
        (userid,currentpoints,points,surpluspoints,remarks,createdon,createdby,createdname,
        createdip,actionstate,changeaction)
        VALUES
        (#{userid}::bigint,(select Points from user_base where userid=#{userid}::bigint)+#{points}::numeric,
        #{points}::numeric,
        (select Points from user_base where userid=#{userid}::bigint)+#{points}::numeric,
        #{remarks},now(),#{createdby},
        #{createdname},#{createdip},'+',
        '购卡送积分');
    </insert>

    <select id="xiaochengxukeyonghuiyanka" resultType="map">
        select u.scheduleid,u.courseid,u.coursename,u.schedulebegin,u.scheduleend,w.resurl,w.labels,u.coachid,u.coachname
        ,COALESCE((select array_to_json(array_agg(row_to_json(row(
        b.cardno,c.cardname,c.resurl,b.curtimes,COALESCE((select favconstimes from cur_teamschedule_membercard_favprice
        where scheduleid=e.scheduleid and cardid=c.cardid and isused is TRUE),d.constimes),c.cardtype
        ))))from crd_membershipcard_user as a inner join crd_membershipcard_base as b on b.cardno=a.cardno
        and b.state = 1 and b.isremoved is FALSE
        and b.isopen is true
        and b.curtimes>0 and (
        ((to_char(current_date,'YYYY-MM-DD')
        BETWEEN COALESCE(to_char(b.cardbegin,'YYYY-MM-DD'),'2000-01-01')
        and COALESCE(to_char(b.cardend,'YYYY-MM-DD'),'2050-12-31'))))
        and (to_char(current_date,'YYYY-MM-DD')&lt;COALESCE(to_char(b.disablebegin,'YYYY-MM-DD'),'2050-12-31')
        or to_char(current_date,'YYYY-MM-DD')>COALESCE(to_char(b.disableend,'YYYY-MM-DD'),'2000-01-01'))
        inner join crd_membershipcardcategory_base as c on c.cardid=b.cardid
        and c.isremoved is FALSE and c.coursetype='T' inner join crd_membershipcardcategory_teamcourse
        as d on d.cardid=c.cardid and d.cardid=b.cardid and d.isremoved is FALSE
         inner join cur_teamschedule as e on e.cid=d.courseid and e.isremoved is FALSE and e.scheduleid=u.scheduleid
        inner join (select cardid,json_array_elements(storesjson) as data from crd_membershipcardcategory_base
        where isremoved is FALSE order by seqno asc) as t on t.cardid=b.cardid and
        t.cardid=d.cardid and (t.data::json#>>'{StoreId}')=e.storeid||'' where a.userid=#{userid}::bigint
        and a.state=1 and a.isremoved is FALSE ),'[]') as cards
        from Cur_TeamSchedule
        as u INNER JOIN cur_teamcourse_base as v on v.courseid=u.courseid and v.state=1 and v.isremoved is FALSE
        INNER JOIN Cur_TeamCourseCategory_Base as w on w.cid=v.cid
        where u.isremoved is FALSE and u.isopened is TRUE
        and to_char(now(),'yyyy-MM-dd HH24:MI:00')&lt;(u.scheduledate || ' ' || u.schedulebegin)
        and u.reservablenumber>u.reservednumber and u.scheduleid=#{scheduleid} ::bigint

    </select>

    <select id="selectcardtime" resultType="map">
        select cardbegin,cardend from crd_membershipcard_base where cardno=#{cardno}
    </select>

    <select id="ticeliebiao" resultType="map">
        select testname,testvalue,to_char(createdon,'yyyy-MM-dd') createdon from Org_PhysicalTest_User
        where userid=#{userid}::bigint
        and isremoved=false
        order by createdon desc
    </select>

    <insert id="inserttice">
        insert into Org_PhysicalTest_User(UserId,testtypeid,TestCategory,TestName,TestUnit,TestValue,CreatedOn,
        CreatedBy,CreatedName,CreatedIp,LastedOn,LastedBy,LastedName,LastedIp,isshow
        )values (
        #{userid}::bigint,#{testtypeid}::bigint,'D',#{testname},#{testunit},#{testvalue},now(),#{createdby},#{createdname},'::1',
        now(),#{createdby},#{createdname},'::1',true
        )
    </insert>

    <update id="deletetice">
        update Org_PhysicalTest_User set isremoved=true
        where createdon>=#{time}::timestamp and createdon&lt;#{time}::timestamp+ interval '1 day' and userid=#{userid}::bigint
    </update>

    <select id="selecttice" resultType="map">
        select * from Org_PhysicalTest_User
        where createdon &gt;=#{time}::timestamp and createdon&lt;#{time}::timestamp+ interval '1 day' and userid=#{userid}::bigint
    </select>

    <update id="updatetice">
        update Org_PhysicalTest_User set testvalue=#{testvalue},lastedon=now(),lastedby=#{lastedby},lastedname=#{lastedname}
        where userid=#{userid}::bigint and createdon &gt;=#{time}::timestamp and createdon &lt;#{time}::timestamp+ interval '1 day'
        and testname=#{testname}
    </update>

    <select id="getopenid" resultType="map">
        select edopenid as openid from User_Bind_ThirdAccount_WXLog a
        inner join User_Bind_ThirdAccount b on a.nickname=b.bindinfor1
        where b.userid=#{userid}::bigint
        limit 1
    </select>
    <select id="wxlogin" resultType="map">
        select a.userid,a.roleid,a.storeid,b.name,c.BindInfor2 as resurl,
        to_char(a.createdon,'yyyy-mm-dd') createdon,b.tel
        from user_staff a
        left join user_base b on a.userid=b.userid
        left join User_Bind_ThirdAccount c on c.userid=b.userid
        where c.bindinfor4=#{unionid} and b.status=1 and a.status=1
    </select>

</mapper>