<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.backstage.crs.mapper.CurriculumAnalysisMapper">
    <select id="sql1" resultType="map">
        select count(*) from Cur_TeamSchedule
        where scheduledate &gt;=#{begintime}::timestamp and scheduledate &lt;=#{endtime}::timestamp
        and isremoved=false and SignedNumber>0
        <if test="storeid !=null and storeid!=''">
            and storeid=#{storeid}::bigint
        </if>
        <if test="coachid !=null and coachid!=''">
            and coachid=#{coachid}::bigint
        </if>
    </select>

    <select id="sql2" resultType="map">
        select count(*) from Cur_PrivSchedule cp inner join cur_privcourse_base cpb
        on cp.courseid=cpb.courseid
        where scheduledate &gt;=#{begintime}::timestamp and scheduledate &lt;=#{endtime}::timestamp
        and cp.isremoved=false and cp.SignedNumber>0
        <if test="storeid !=null and storeid!=''">
            and storeid=#{storeid}::bigint
        </if>
        <if test="coachid !=null and coachid!=''">
            and cpb.coachid=#{coachid}::bigint
        </if>
    </select>

    <select id="sql3" resultType="map">
        select sum(TraineeNum) from Ord_OrderCourse
        where CourseDate &gt;=#{begintime}::timestamp and CourseDate &lt;=#{endtime}::timestamp
        and SignState='1'
        and isremoved=false
        and CardType='T'
        <if test="storeid !=null and storeid!=''">
            and storeid=#{storeid}::bigint
        </if>
        <if test="coachid !=null and coachid!=''">
            and coachid=#{coachid}::bigint
        </if>
    </select>

    <select id="sql4" resultType="map">
        select sum(TraineeNum) from Ord_OrderCourse
        where CourseDate &gt;=#{begintime}::timestamp and CourseDate &lt;=#{endtime}::timestamp
        and SignState='1'
        and isremoved=false
        and CardType='P'
        <if test="storeid !=null and storeid!=''">
            and storeid=#{storeid}::bigint
        </if>
        <if test="coachid !=null and coachid!=''">
            and coachid=#{coachid}::bigint
        </if>
    </select>

    <select id="sql5" resultType="map">
        select sum(o.CoursePrice) from Ord_OrderCourse o inner join Crd_MembershipCard_Base c
        on o.cardno=c.cardno
        where CourseDate &gt;=#{begintime}::timestamp and CourseDate &lt;=#{endtime}::timestamp
        and c.cardtype='S'
        and o.signstate='1'
        and o.isremoved=false
        <if test="storeid !=null and storeid!=''">
            and storeid=#{storeid}::bigint
        </if>
        <if test="coachid !=null and coachid!=''">
            and coachid=#{coachid}::bigint
        </if>
    </select>

    <select id="sql6" resultType="Integer">
        select count(*) from Ord_OrderCourse
        where CourseDate &gt;=#{begintime}::timestamp and CourseDate &lt;=#{endtime}::timestamp
        and isremoved=false
        and signstate='1'
        <if test="storeid !=null and storeid!=''">
            and storeid=#{storeid}::bigint
        </if>
        <if test="coachid !=null and coachid!=''">
            and coachid=#{coachid}::bigint
        </if>
        GROUP BY userid having count(*)=#{i}
    </select>

    <select id="sql7" resultType="Integer">
        select count(*) from Ord_OrderCourse
        where CourseDate &gt;=#{begintime}::timestamp and CourseDate &lt;=#{endtime}::timestamp
        and isremoved=false
        and signstate='1'
        <if test="storeid !=null and storeid!=''">
            and storeid=#{storeid}::bigint
        </if>
        <if test="coachid !=null and coachid!=''">
            and coachid=#{coachid}::bigint
        </if>
        GROUP BY userid having count(*)>=#{i}
    </select>

    <select id="ctCoursereport" resultType="map">
        select ct.scheduledate,ct.coachname,
        '团课' as coursetype,ct.coursename,
        ct.schedulebegin,ct.reservednumber+count(case when oo.ordstate='2' then 1 else null end) as Makeanappointment,
        ct.signednumber,count(case when oo.ordstate='2' then 1 else null end) as Cancel,
        ct.reservablenumber,
        cast(sum(case when oo.ordstate='1' then oo.courseprice else 0 end) AS decimal(10,2)) as CurriculumPrice,
        case reservablenumber when 0 then 0 else round(signednumber::numeric/reservablenumber::numeric,2)*100 end as Fullcapacityrate,
        COUNT(1) OVER() as total
        from Cur_TeamSchedule ct left join Ord_OrderCourse oo
        on ct.ScheduleId=oo.ScheduleId
        where ScheduleDate &gt;=#{begintime}::timestamp
        and ScheduleDate &lt;#{endtime}::timestamp + interval '1 day'
        and ct.isremoved=false
        <if test="coachid !=null and coachid!=''">
            and ct.coachid=#{coachid}::bigint
        </if>
        <if test="storeid !=null and storeid!=''">
            and ct.storeid=#{storeid}::bigint
        </if>
        group by ct.coachname,ct.scheduledate,ct.coachname,ct.coursename,ct.schedulebegin,
        ct.reservednumber,ct.reservablenumber,ct.signednumber
        order by ct.scheduledate desc
        limit #{limit}::bigint offset #{page}::bigint
    </select>

    <select id="cpCoursereport" resultType="map">
        select cp.scheduledate,cpb.coachname,
        '私课' as coursetype,cp.coursename,
        cp.schedulebegin,cp.reservednumber,
        count(case when oo.signstate='1' then 1 else null end) as signednumber,
        count(case when oo.ordstate='2' then 1 else null end) as Cancel,
        cast(sum(case when oo.ordstate='1' then oo.courseprice else 0 end) AS decimal(10,2)) as curriculumprice,
        COUNT(1) OVER() as total
        from Cur_PrivSchedule cp left join Ord_OrderCourse oo
        on cp.scheduleid=oo.scheduleid inner join Cur_PrivCourse_Base cpb
        on cp.courseid=cpb.courseid
        where cp.ScheduleDate &gt;=#{begintime}::timestamp
        and cp.ScheduleDate &lt;#{endtime}::timestamp + interval '1 day'
        and cp.isremoved=false
        <if test="coachid !=null and coachid!=''">
            and cpb.coachid=#{coachid}::bigint
        </if>
        <if test="storeid !=null and storeid!=''">
            and cp.storeid=#{storeid}::bigint
        </if>
        group by cp.scheduledate,cpb.coachname,cp.coursename,
        cp.schedulebegin,cp.reservednumber
        order by cp.scheduledate desc
        limit #{limit}::bigint offset #{page}::bigint
    </select>

    <select id="getNumberofreservations" resultType="Integer">
        select CASE WHEN sum(TraineeNum) is null then 0 else sum(TraineeNum) end  from Ord_OrderCourse
        where CourseDate &gt;=#{begintime}::timestamp
        and CourseDate &lt;#{endtime}::timestamp+ interval '1 day'
        and IsRemoved=false
        and CardType=#{cardtype}
        <if test="coachid !=null and coachid!=''">
            and coachid=#{coachid}::bigint
        </if>
        <if test="storeid !=null and storeid!=''">
            and storeid=#{storeid}::bigint
        </if>
    </select>

    <select id="getNumberofsignin" resultType="Integer">
        select CASE WHEN sum(TraineeNum)  is null then 0 else sum(TraineeNum) end from Ord_OrderCourse
        where CourseDate &gt;=#{begintime}::timestamp
        and CourseDate &lt;#{endtime}::timestamp+ interval '1 day'
        and IsRemoved=false
        and OrdState=1
        and SignState=1
        and CardType=#{cardtype}
        <if test="coachid !=null and coachid!=''">
            and coachid=#{coachid}::bigint
        </if>
        <if test="storeid !=null and storeid!=''">
            and storeid=#{storeid}::bigint
        </if>
    </select>

    <select id="getNumberofgrouplessons" resultType="Integer">
        select CASE WHEN count(*) is null then 0 else count(*) end from Cur_TeamSchedule
        where isremoved=false
        and ScheduleDate &gt;=#{begintime}::timestamp
        and ScheduleDate &lt;#{endtime}::timestamp+ interval '1 day'
        <if test="coachid !=null and coachid!=''">
            and coachid=#{coachid}::bigint
        </if>
        <if test="storeid !=null and storeid!=''">
            and storeid=#{storeid}::bigint
        </if>
        ;
    </select>

    <select id="getNumberofprivatelessons" resultType="Integer">
        select CASE WHEN count(*) is null then 0 else count(*) end from Cur_PrivSchedule cp
        left join Cur_PrivCourse_Base cpb on
        cp.CourseId=cpb.courseid
        where cp.isremoved=false
        and ScheduleDate &gt;=#{begintime}::timestamp
        and ScheduleDate &lt;#{endtime}::timestamp+ interval '1 day'
        <if test="coachid !=null and coachid!=''">
            and cpb.coachid=#{coachid}::bigint
        </if>
        <if test="storeid !=null and storeid!=''">
            and cp.storeid=#{storeid}::bigint
        </if>
    </select>

    <select id="getAmountoflessonssoldpercard" resultType="map">
        select ctb.CateTitle as CourseTitle,
        cast(sum(CoursePrice) AS decimal(10,2)) as CourseAmount
        from Ord_OrderCourse oo
        inner join Cur_TeamSchedule ct on oo.ScheduleId=ct.ScheduleId
        inner join Cur_TeamCourseCategory_Base ctb on ct.cid=ctb.cid
        inner join Crd_MembershipCard_Base cmb on oo.CardNo=cmb.cardno
        inner join Crd_MembershipCardCategory_Base cmcb on cmcb.cardid=cmb.cardid
        where ct.isremoved=false
        and oo.isremoved=false
        and ct.ScheduleDate &gt;=#{begintime}::timestamp
        and ct.ScheduleDate &lt;#{endtime}::timestamp + interval '1 day'
        and oo.OrdState=1
        <if test="coachid !=null and coachid!=''">
            and oo.coachid=#{coachid}::bigint
        </if>
        <if test="storeid !=null and storeid!=''">
            and oo.storeid=#{storeid}::bigint
        </if>
        group by ctb.CateTitle
    </select>

    <select id="selectcost" resultType="map">
        select * from testcost
         where fenbu=#{fenbu}
        order by yuefen asc
    </select>

    <select id="selectcostall" resultType="map">
        select sum(gongzi) gongzi,sum(shebao) shebao,sum(fuli) fuli,sum(zujin) zujin,
        sum(shuidian) shuidian,sum(bangong) bangong,sum(xiuli) xiuli,sum(riyong) riyong,
        sum(gongguan) gongguan,sum(tuiguang) tuiguang,sum(waibu) waibu,sum(shichang) shichang,
        sum(caigou) caigou,sum(qita) qita,yuefen
        from testcost
        group by yuefen
        order by yuefen asc
    </select>
    <update id="updatecost" parameterType="com.example.backstage.crs.entity.Testcost">
        update testcost set gongzi=#{gongzi},shebao=#{shebao},fuli=#{fuli},zujin=#{zujin},
        shuidian=#{shuidian},bangong=#{bangong},xiuli=#{xiuli},riyong=#{riyong},gongguan=#{gongguan},
        tuiguang=#{tuiguang},waibu=#{waibu},shichang=#{shichang},caigou=#{caigou},qita=#{qita}
        where yuefen=#{yuefen} and fenbu=#{fenbu}
    </update>

    <select id="selectrevenue" resultType="map">
        select * from Testrevenue
        order by sequence asc
    </select>

    <select id="selectrevenueall" resultType="map">
        select sum(zbys)+sum(mdys) as revenue  from Testrevenue
        group by sequence
        order by sequence asc
    </select>

    <select id="getNumberofreservation" resultType="Integer">
        select COALESCE(sum(traineenum),0) from ord_ordercourse
        where createdon &gt;=#{begintime}::timestamp
          and createdon &lt;#{endtime}::timestamp
        <if test="coachid !=null and coachid!=''">
            and coachid=#{coachid}::bigint
        </if>
        <if test="storeid !=null and storeid!=''">
            and storeid=#{storeid}::bigint
        </if>
    </select>

    <update id="bindingvenue">
        update user_base set storeid=#{storeid}::bigint where userid=#{userid}::bigint
    </update>

    <select id="qy1" resultType="map">
        select isopenedbyfirst from crd_membershipcardcategory_base where cardid=#{cardid}::bigint
    </select>

    <select id="qytype" resultType="map">
        select cardtype,state from crd_membershipcardcategory_base where cardid=#{cardid}::bigint
    </select>

    <insert id="qy2">
        insert into crd_membershipcard_base(cardno,cardpwd,cardid,cardname,cardtype,isfree,typeid,originalfee,isopen,cardbegin,
        periodvalidity,cardend,times,points,curtimes,remarks,state,isremoved,createdon,createdby,
        createdname,createdip,totaltimes,totalfee,lastedon,lastedby,lastedname,lastedip,timefee)
        select #{cardno},'123456',a.cardid,a.cardname,a.cardtype,a.isfree,b.tid,b.fee,true,now(),
        b.periodvalidity,(now()+(b.periodvalidity||' day')::interval),
        b.times,b.points,b.times,'小程序购卡',1,'f',now(),#{userid}::bigint,
        (select name from user_base where userid=#{userid}::bigint),'::1',b.times,b.fee,now(),
        #{userid}::bigint,(select name from user_base where userid=#{userid}::bigint),'::1',(CASE when #{timefee}='0' then 0 else trunc(b.fee/b.times,2) end)
        from crd_membershipcardcategory_base as a inner join crd_membershipcardcategory_typecard as b
        on b.cardid=a.cardid and b.tid=#{tid}::bigint where a.cardid=#{cardid}::bigint
    </insert>

    <insert id="qy3">
        insert into crd_membershipcard_purchase(purchaseid,cardno,cardid,cardname,buytype,buytimes,
        points,sellingfee,payment,storeid,storename,cardbegin,cardend,
        remarks,isremoved,createdon,createdby,createdname,createdip,lastedon,lastedby,lastedname,
        lastedip) select #{newid}::bigint,#{cardno},a.cardid,a.cardname,#{buytype},b.times,b.points,#{fee}::numeric,
        5,#{storeid}::bigint,#{storename},now(),(now()+(b.periodvalidity||' day')::interval),'小程序购卡','f',
        now(),#{userid}::bigint,(select name from user_base where userid=#{userid}::bigint),'::1',now(),#{userid}::bigint,
        (select name from user_base where userid=#{userid}::bigint),'::1'
        from crd_membershipcardcategory_base as a inner join crd_membershipcardcategory_typecard as b
        on b.cardid=a.cardid and b.tid=#{tid}::bigint where a.cardid=#{cardid}::bigint
    </insert>

    <insert id="qy4">
        insert into crd_membershipcard_base(cardno,cardpwd,cardid,cardname,cardtype,isfree,
        typeid,originalfee,isopen,periodvalidity,times,points,curtimes,
        remarks,state,isremoved,createdon,createdby,createdname,createdip,totaltimes,
        totalfee,lastedon,lastedby,lastedname,lastedip,timefee) select #{cardno},'123456',a.cardid,a.cardname,a.cardtype,a.isfree,
        b.tid,b.fee,false,b.periodvalidity,b.times,b.points,b.times,'小程序购卡',1,
        'f',now(),#{userid}::bigint,(select name from user_base where userid=#{userid}::bigint),'::1',b.times,b.fee,
        now(),#{userid}::bigint,(select name from user_base where userid=#{userid}::bigint),'::1',(CASE when #{timefee}='0' then 0 else trunc(b.fee/b.times,2) end)
        from crd_membershipcardcategory_base as a inner join crd_membershipcardcategory_typecard as b
        on b.cardid=a.cardid and b.tid=#{tid}::bigint where a.cardid=#{cardid}::bigint
    </insert>

    <insert id="qy5">
        insert into crd_membershipcard_purchase(purchaseid,cardno,cardid,cardname,buytype,
        buytimes,points,sellingfee,payment,storeid,storename,remarks,isremoved,
        createdon,createdby,createdname,createdip,lastedon,lastedby,lastedname,lastedip)
         select #{newid}::bigint,#{cardno},a.cardid,a.cardname,#{buytype},b.times,b.points,#{fee}::numeric,5,#{storeid}::bigint,#{storename},
        '小程序购卡','f',now(),#{userid}::bigint,(select name from user_base where userid=#{userid}::bigint),'::1',now(),
        #{userid}::bigint,(select name from user_base where userid=#{userid}::bigint),'::1' from crd_membershipcardcategory_base as a
        inner join crd_membershipcardcategory_typecard as b on b.cardid=a.cardid and b.tid=#{tid}::bigint where a.cardid=#{cardid}::bigint
    </insert>

    <select id="selectstorename" resultType="map">
        select o.id as storeid,o.name as storename from user_base u
        inner join Org_Store o
        on u.storeid=o.id
        where u.userid=#{userid}::bigint
    </select>

    <select id="qy7" resultType="Integer">
        insert into crd_membershipcard_user(userid,cardno,ispoint,remarks,state,isremoved,createdon,createdby,createdname,createdip,
        lastedon,lastedby,lastedname,lastedip) select userid,#{cardno},'t','会员小程序购卡',1,'f',now(),userid,name,'::1',now(),userid,name,'::1'
        from user_base where userid=#{userid}::bigint
    </select>

    <select id="points" resultType="map">
        select points from crd_membershipcardcategory_typecard where tid=#{tid}::bigint
    </select>

    <select id="qysalespoint" resultType="map">
        select points from user_base where userid=#{userid}::bigint
    </select>

    <select id="storeidOrTel" resultType="map">
        select storeid,tel,name,status,memgrade,points from user_base where status=1 and userid = #{userid}::bigint
    </select>

    <insert id="logqy">
        insert into log_user_points(logid,userid,currentpoints,points,surpluspoints,remarks,
                createdon,createdby,createdname,createdip,actionstate,changeaction)values(#{logid}::bigint, #{userid}::bigint, #{currentpoints}::numeric,
                 #{points}::numeric, #{surpluspoints}::numeric, #{remarks},
                #{createdon}::timestamp, #{createdby}, #{createdname}, #{createdip}, #{actionstate}, #{changeaction})
    </insert>

    <update id="qy6">
        update user_base set points=points+(select points from crd_membershipcardcategory_typecard where tid=#{tid}::bigint),
        lastedon=now(),lastedby=#{userid}::bigint,lastedname=name,lastedip='::1' where userid=#{userid}::bigint
    </update>

    <select id="userCard" resultType="map">
        select cardname,originalfee,cardend from crd_membershipcard_base where cardno = #{carno}
    </select>

    <select id="isSendOrNot" resultType="map">
        select isopen from tmp_notic where tmpcode = #{tmpcode}
    </select>

    <select id="tmpNotic" resultType="map">
        SELECT tmpcode, tmptype, tmpcategory, rulename, rulevalue, prenoticcontents, noticecontents,
        lstnoticecontents, isnoticesupervisor, isnoticecoach, isnoticemanager, isopen FROM tmp_notic where tmpcode = #{tmpcode}
    </select>

    <insert id="insertLogMobileMeta">
        insert into log_mobile_meta(id,platform,mobilenum,msg,localip,longitude,
        latitude,createdon)values(
        #{newid}::bigint, #{platform}, #{mobilenum}, #{msg},
         #{localip}, #{longitude}, #{latitude}, now()
        )
    </insert>
    
    <insert id="insertLogMobileReceived">
        INSERT INTO log_mobile_received(id, platform, mobilenum, msg, localip, longitude, latitude, thridplatform,
        recivedstate, recivedinfos, createdon)VALUES (
        #{newid}::bigint, #{platform}, #{mobilenum}, #{msg},
        #{localip}, #{longitude}, #{latitude},
        #{thridplatform},#{recivedstate},#{recivedinfos},now()
        )
    </insert>

    <select id="userStaffPhone1" resultType="map">
        select roleid from scr_role where deleteflag = 0 and rolename = #{rolename}
    </select>

    <select id="userStaffPhone2" resultType="map">
        select userid,roleid from user_staff where status = 1 and storeid like '%${storeid}%' and roleid like '%${roleid}%'
    </select>

    <select id="isSendOrNotByRole" resultType="map">
        select isnoticesupervisor,isnoticecoach,isnoticemanager from tmp_notic where tmpcode = #{tmpcode}
    </select>

</mapper>